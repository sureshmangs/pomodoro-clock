{"version":3,"sources":["components/alarm.wav","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","useState","breakLength","setBreakLength","sessionLength","setSessionLength","initialSessionLength","timeLeft","setTimeLeft","isPlay","setIsPlay","pomodoroType","setPomodoroType","sessionIntervalRef","useRef","breakIntervalRef","audioRef","decrementTimeLeft","prevState","useEffect","current","setInterval","clearInterval","play","console","log","className","id","onClick","Math","round","floor","pause","currentTime","ref","src","alarm","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f15ce21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.988833bf.wav\";","import React, { useState, useEffect, useRef } from 'react';\r\nimport alarm from './alarm.wav';\r\n\r\nfunction Clock() {\r\n    const initialBreakLength = 5;    // in minutes\r\n    const initialSessionLength = 25;    // in minutes\r\n    const initialTimeLeft = initialSessionLength * 60;  // in seconds\r\n    const [breakLength, setBreakLength] = useState(initialBreakLength);\r\n    const [sessionLength, setSessionLength] = useState(initialSessionLength);\r\n    const [timeLeft, setTimeLeft] = useState(initialTimeLeft);\r\n    const [isPlay, setIsPlay] = useState(false);\r\n    const [pomodoroType, setPomodoroType] = useState('Session');\r\n    const sessionIntervalRef = useRef();\r\n    const breakIntervalRef = useRef();\r\n    const audioRef = useRef(null);\r\n\r\n    const incrementBreak = () => {\r\n        !isPlay && setBreakLength(prevState => prevState + 1);\r\n    }\r\n\r\n    const decrementBreak = () => {\r\n        !isPlay && setBreakLength(prevState => {\r\n            if (prevState - 1 < 0) return prevState\r\n            else return prevState - 1\r\n        });\r\n    }\r\n\r\n    const incrementSession = () => {\r\n        !isPlay && setSessionLength(prevState => prevState + 1);\r\n        !isPlay && setTimeLeft(prevState => Math.round(Math.floor((prevState + 60) / 60)) * 60);\r\n    }\r\n\r\n    const decrementSession = () => {\r\n        !isPlay && setSessionLength(prevState => {\r\n            if (prevState - 1 < 0) return prevState\r\n            else return prevState - 1\r\n        });\r\n        !isPlay && setTimeLeft(prevState => {\r\n            if (prevState - 60 < 0) return 0;\r\n            else if (prevState % 60 === 0) return prevState - 60;\r\n            else return prevState - (prevState % 60);\r\n        });\r\n    }\r\n\r\n    const decrementTimeLeft = () => {\r\n        setTimeLeft(prevState => {\r\n            if (prevState - 1 < 0) return prevState\r\n            else return prevState - 1\r\n        })\r\n    }\r\n\r\n    const handlePlayPause = () => {\r\n        setIsPlay(prevState => !prevState);\r\n\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setBreakLength(initialBreakLength);\r\n        setSessionLength(initialSessionLength);\r\n        setTimeLeft(initialTimeLeft);\r\n        setPomodoroType('Session');\r\n        setIsPlay(false);\r\n        audioRef.current.pause();\r\n        audioRef.current.currentTime = 0.0;\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isPlay === true && pomodoroType === 'Session') {\r\n            sessionIntervalRef.current = setInterval(() => {\r\n                decrementTimeLeft();\r\n                if (timeLeft === 0) {\r\n                    clearInterval(sessionIntervalRef.current);\r\n                    // play audio\r\n                    audioRef.current.play();\r\n                    // start the break session\r\n                    setPomodoroType('Break');\r\n                    setTimeLeft(breakLength * 60);\r\n                }\r\n            }, 1000)\r\n        } else if (isPlay === false && pomodoroType === 'Session') {\r\n            clearInterval(sessionIntervalRef.current);\r\n        }\r\n\r\n        if (isPlay === true && pomodoroType === 'Break') {\r\n            console.log('break interval start');\r\n            breakIntervalRef.current = setInterval(() => {\r\n                console.log('break run')\r\n                decrementTimeLeft();\r\n                if (timeLeft === 0) {\r\n                    clearInterval(breakIntervalRef.current);\r\n                    // play audio\r\n                    audioRef.current.play();\r\n                    // start the  session\r\n                    setPomodoroType('Session');\r\n                    setTimeLeft(sessionLength * 60);\r\n                }\r\n\r\n            }, 1000);\r\n        } else if (isPlay === false && pomodoroType === 'Break') {\r\n            clearInterval(breakIntervalRef.current);\r\n        }\r\n\r\n        // on unmounting\r\n        return () => {\r\n            clearInterval(sessionIntervalRef.current);\r\n            clearInterval(breakIntervalRef.current);\r\n        }\r\n    }, [isPlay, timeLeft, pomodoroType, breakLength, sessionLength]);\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 id=\"head\">Pomodoro</h2>\r\n            <div className=\"operation\">\r\n                <div className=\"operation-1\">\r\n                    <p className=\"operation-head\" id=\"break-label\">Break Length</p>\r\n                    <span className=\"click\" id=\"break-decrement\" onClick={incrementBreak}><i className=\"fas fa-angle-up\"></i></span>\r\n                    <span id=\"break-length\">{breakLength}</span>\r\n                    <span className=\"click\" id=\"session-decrement\" onClick={decrementBreak}><i className=\"fas fa-angle-down\"></i></span>\r\n                </div>\r\n                <div className=\"operation-2\">\r\n                    <p className=\"operation-head\" id=\"session-label\">Session Length</p>\r\n                    <span className=\"click\" id=\"break-increment\" onClick={incrementSession}><i className=\"fas fa-angle-up\"></i></span>\r\n                    <span id=\"session-length\">{sessionLength}</span>\r\n                    <span className=\"click\" id=\"session-increment\" onClick={decrementSession}><i className=\"fas fa-angle-down\"></i></span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"time-box\">\r\n                <div className=\"time\">\r\n                    <p id=\"timer-label\">{pomodoroType}</p>\r\n                    <p id=\"time-left\"> {Math.round(Math.floor(timeLeft / 60)) < 10 ? '0' : null}{Math.round(Math.floor(timeLeft / 60))}:\r\n                    {timeLeft % 60 < 10 ? '0' : null}{timeLeft % 60} </p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span className=\"click\" id=\"start_stop\" onClick={handlePlayPause}><i className=\"fas fa-play-circle\"></i></span>\r\n                <span className=\"click\" id=\"reset\" onClick={handleReset}><i className=\"fas fa-sync-alt \"></i></span>\r\n            </div>\r\n\r\n            <audio ref={audioRef} id=\"beep\" src={alarm} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Clock\r\n","import React from 'react';\nimport './App.css';\nimport Clock from './components/Clock'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}